# -*- coding: utf-8 -*-
"""Synopsis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/147wkgKpAtdAORgEusuG2Ntdw1Qi5liJR
"""

import numpy as np
import pandas as pd
import kagglehub
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image_dataset_from_directory
from sklearn.metrics import confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt
import PIL.ImageFile
import os
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Activation, Dropout, BatchNormalization, Rescaling

#Allow loading of truncated images, this makes the program continue even if the dataset has corrupt images
PIL.ImageFile.LOAD_TRUNCATED_IMAGES = True

# Download latest version of the dataset
path = kagglehub.dataset_download("abdelghaniaaba/wildfire-prediction-dataset")

train_dir = os.path.join(path, "train")
val_dir = os.path.join(path, "valid")
test_dir = os.path.join(path, "test")

datagen = ImageDataGenerator(dtype="float32", rescale= 1./255)

batchSize = 32
imageSize = (128,128)

train_ds = datagen.flow_from_directory(
    train_dir,
    target_size=imageSize,
    batch_size=batchSize,
    class_mode ="binary"
)

val_ds = datagen.flow_from_directory(
    val_dir,
    target_size=imageSize,
    batch_size=batchSize,
    class_mode ="binary"
)

test_ds = datagen.flow_from_directory(
    test_dir,
    target_size=imageSize,
    batch_size=batchSize,
    class_mode ="binary"
)

tf.random.set_seed(23)

#CNN Model
model = Sequential([
    #Uses relu to make the training faster and makes the model deeper and more efficient
    #First layer, to learn basic patterns
    Conv2D(64, 7, activation="relu", input_shape=(128, 128, 3), padding="same"),
    #Makes it more efficient (takes half the time to execute) and less likely to overfit
    #Makes it better in learning patterns, even in different positions
    MaxPooling2D(2),

    #Second layer, learn more complex forms
    Conv2D(128, 3, activation="relu", padding="same"),
    MaxPooling2D(2),

    #Third layer, detects abstract structures
    Conv2D(256, 3, activation="relu", padding="same"),
    MaxPooling2D(2),

    Flatten(),

    Dense(128, activation="relu"),
    Dropout(0.5),
    #To classify in 2 classes (wildfire and no wildfire), using 1 neuron
    Dense(1, activation="sigmoid")
    ])

model.compile(
    optimizer="adam",
    loss="binary_crossentropy",
    metrics=["accuracy", "recall"]
)

model.summary()

#Make sure to use GPU in the runtime type to make this faster
#It's 5 hours vs 15 minutes aprox.
history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=10
)

test_loss, test_acc, test_recall = model.evaluate(test_ds)
print(f"Test accuracy: {test_acc*100:.2f}%")
print(f"Test loss: {test_loss*100:.2f}%")
print(f"Test recall: {test_recall*100:.2f}%")

pd.DataFrame(history.history)[["accuracy","val_accuracy"]].plot(
    grid=True, xlabel="Epoch", ylabel="Accuracy", title= "Accuracy in training",
    style=["r--", "b-"])
plt.legend(loc="lower left")
plt.show()

pd.DataFrame(history.history)[["loss","val_loss"]].plot(
    grid=True, xlabel="Epoch", ylabel="Loss", title= "Loss in training",
    style=["r--.", "b-*"])
plt.legend(loc="lower left")
plt.show()

test_ds = datagen.flow_from_directory(
    test_dir,
    target_size=(128, 128),
    batch_size=32,
    class_mode="binary",
    #Important to have the correct labels with the images
    shuffle=False
)

#To start from the first image
test_ds.reset()

true_classes = test_ds.classes
predictions = model.predict(test_ds)
#Changes the threshold to have a better recall
predicted_classes = (predictions > 0.25).astype("int").flatten()

classes = test_ds.class_indices.keys()

print(classification_report(true_classes, predicted_classes, target_names=classes))

cm = confusion_matrix(true_classes, predicted_classes)

plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=classes, yticklabels=classes)
plt.xlabel("Prediction")
plt.ylabel("True label")
plt.title("Confusion Matrix")
plt.show()